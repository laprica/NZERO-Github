import visa
import sys

""" Module to access common GPIB commands on a Keithley 2400 """
""" without needing to see the confusing GPIB commands """

""" created by Leanna Pancoast 24 Feb 2017 """

class SMC100A:
    
    def __init__(self,instrument):
        self.inst = instrument

    def read_inst(self):
        s = self.inst.query('*IDN?')
        s = s.encode('ascii','ignore')
        return s

    def reset(self):
        self.inst.write('*RST')

    def read_output(self):
        s = self.inst.query(':OUTP?')
        s = s.encode('ascii','ignore')
        return s

    def set_output(self, s):
        if(s != 'ON' and s !='OFF'):
            sys.exit('you can only set output to ON or OFF')
        self.inst.write(':OUTP {}'.format(s))


    # ASCII Data format
    # vvvvvvvvvvvvv,ccccccccccccc,rrrrrrrrrrrrr,ttttttttttttt,sssssssssssss
    # voltage reading, current reading, resistance reading, time, status
    # all have 13 characters
    # +1.000205E+00 format

    def read_freq(self):
        s = self.inst.query('READ?')
        s = s.encode('ascii','ignore')
        return float(s[0:12])

    def set_freq(self, n):
        if(not isinstance(n, (int,float))):
            sys.exit('you can only set numbers')
        self.inst.write(':SOUR:VOLT:LEV {}'.format(n))

    def read_mod(self):
        s = self.inst.query('READ?')
        s = s.encode('ascii','ignore')
        return float(s[14:27])

    def set_mod(self, n):
        if(not isinstance(n, (int,float))):
            sys.exit('you can only set numbers')
        self.inst.write(':SOUR:CURR:LEV {}'.format(n))

